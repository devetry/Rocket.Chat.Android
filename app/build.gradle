def taskRequests = getGradle().getStartParameter().getTaskRequests().toString()
def isPlay = !(taskRequests.contains("Foss") || taskRequests.contains("foss"))

<<<<<<< HEAD
repositories {
    maven { url 'https://maven.fabric.io/public' }
//    maven { url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo' }
    maven { url 'https://github.com/WickeDev/stetho-realm/raw/master/maven-repo' }
=======
apply plugin: 'com.android.application'
if (isPlay) {
    apply plugin: 'io.fabric'
>>>>>>> develop
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
<<<<<<< HEAD
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.github.triplet.play'
apply from: '../config/quality/quality.gradle'
=======
apply plugin: 'kotlin-kapt'
apply plugin: "com.github.ben-manes.versions"
>>>>>>> develop

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion '28.0.3'

    defaultConfig {
<<<<<<< HEAD
        applicationId "chat.rocket.android"
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 58
        versionName "1.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
=======
        applicationId "chat.rocket.ytpconnect"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 2051
        versionName "2.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
>>>>>>> develop
        multiDexEnabled true

        def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // For Jitsi
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // For Jitsi
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    signingConfigs {
        release {
            storeFile file('/Users/TannerJuby/Devetry/Projects/YTP/Android/YTPConnect/Keystore/ytp_connect_keystore')
            storePassword 'devetry123'
            keyAlias 'ytpconnectalias'
            keyPassword 'devetry123'
        }
        debug {
            storeFile project.rootProject.file('debug.keystore').getCanonicalFile()
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            buildConfigField "String", "REQUIRED_SERVER_VERSION", '"0.57.0"'
            buildConfigField "String", "RECOMMENDED_SERVER_VERSION", '"0.57.2"'
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            buildConfigField "String", "REQUIRED_SERVER_VERSION", '"0.57.0"'
            buildConfigField "String", "RECOMMENDED_SERVER_VERSION", '"0.57.2"'
            signingConfig signingConfigs.debug
//            applicationIdSuffix ".dev"
        }
    }

    flavorDimensions "type"

    productFlavors {
        // includes proprietary libs
        play {
            dimension "type"
        }

        // only FOSS
        foss {
            dimension "type"
        }

        test {
            test.java.srcDirs += 'src/test/kotlin'
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
        }
    }

    dexOptions {
        if(System.getenv()["CIRCLECI"] as boolean) {
            javaMaxHeapSize "1536M"
            preDexLibraries false
        }
    }

<<<<<<< HEAD
play {
    jsonFile = file('rocket-chat.json')
    track = "${track}"
}
ext {
    stethoVersion = '1.5.0'
    stethoOkhttp3Version = '1.5.0'
    stethoRealmVersion = '2.2.2'
    rxbindingVersion = '2.0.0'
    rxlifecycleVersion = '2.1.0'
    icepickVersion = '3.2.0'
    permissionsdispatcherVersion = '2.4.0'
}

dependencies {
    api project(':android-ddp')
    api project(':rocket-chat-android-widgets')
    api project(':persistence-realm')
    implementation extraDependencies.okHTTP
    implementation extraDependencies.rxJava
    implementation extraDependencies.rxKotlin
    implementation extraDependencies.boltTask
    implementation supportDependencies.multidex
    implementation supportDependencies.designSupportLibrary
    implementation supportDependencies.annotation
    implementation rxbindingDependencies.rxBinding
    implementation rxbindingDependencies.rxBindingSupport
    implementation rxbindingDependencies.rxBindingAppcompact
    api "org.jetbrains.kotlin:kotlin-stdlib-jre8:$rootProject.ext.kotlinVersion"
    implementation "com.google.firebase:firebase-core:$rootProject.ext.playLibVersion"
    implementation "com.google.firebase:firebase-crash:$rootProject.ext.playLibVersion"
    implementation "com.google.android.gms:play-services-gcm:$rootProject.ext.playLibVersion"
    implementation "com.trello.rxlifecycle2:rxlifecycle:$rxlifecycleVersion"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:$rxlifecycleVersion"
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:$rxlifecycleVersion"
    implementation 'nl.littlerobots.rxlint:rxlint:1.2'
    implementation "frankiesardo:icepick:$icepickVersion"
    annotationProcessor "frankiesardo:icepick-processor:$icepickVersion"
    implementation "com.github.hotchemi:permissionsdispatcher:$permissionsdispatcherVersion"
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:$permissionsdispatcherVersion"
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    implementation(extraDependencies.crouton) {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation extraDependencies.androidJob
    implementation extraDependencies.jstate
    debugImplementation "com.facebook.stetho:stetho:$stethoVersion"
    debugCompile "com.facebook.stetho:stetho-okhttp3:$stethoOkhttp3Version"
    debugCompile "com.uphyca:stetho_realm:$stethoRealmVersion"
    debugCompile "com.tspoon.traceur:traceur:1.0.1"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.3'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$rootProject.ext.kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$rootProject.ext.kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$rootProject.ext.kotlinVersion"
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"
    testImplementation 'org.amshove.kluent:kluent:1.14'
}
apply plugin: 'com.google.gms.google-services'
=======
    packagingOptions {
        exclude 'META-INF/core.kotlin_module'
        exclude 'META-INF/main.kotlin_module'
    }

    lintOptions {
        lintConfig file("src/main/res/xml/lint.xml")
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':player')
    implementation project(':emoji')
    implementation project(':draw')
    implementation project(':util')
    implementation project(':core')
    implementation project(':suggestions')
    implementation libraries.kotlin
    implementation libraries.coroutinesCore
    implementation libraries.coroutinesAndroid
    implementation libraries.appCompat
    implementation libraries.recyclerview
    implementation libraries.constraintlayout
    implementation libraries.cardview
    implementation libraries.browser
    implementation libraries.androidKtx
    implementation libraries.fragmentsKtx
    implementation libraries.dagger
    implementation libraries.daggerSupport
    kapt libraries.daggerProcessor
    kapt libraries.daggerAndroidApt
    implementation libraries.flexbox
    implementation libraries.material
    implementation libraries.room
    kapt libraries.roomProcessor
    implementation libraries.lifecycleExtensions
    kapt libraries.lifecycleCompiler
    implementation libraries.viewmodelKtx
    implementation libraries.workmanager
    implementation libraries.livedataKtx
    implementation libraries.rxKotlin
    implementation libraries.rxAndroid
    implementation libraries.moshi
    implementation libraries.okhttp
    implementation libraries.okhttpLogger
    implementation libraries.timber
    implementation libraries.threeTenABP
    kapt libraries.kotshiCompiler
    implementation libraries.kotshiApi
    implementation libraries.fresco
    api libraries.frescoOkHttp
    implementation libraries.frescoAnimatedGif
    implementation libraries.frescoWebP
    implementation libraries.frescoAnimatedWebP
    implementation libraries.frescoImageViewer
    implementation libraries.markwon
    implementation libraries.aVLoadingIndicatorView
    implementation libraries.glide
    implementation libraries.glideTransformations
    implementation(libraries.jitsi) { transitive = true }
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    // Proprietary libraries
    playImplementation libraries.fcm
    playImplementation libraries.firebaseAnalytics
    playImplementation libraries.playServicesAuth
    playImplementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') { transitive = true }
    playImplementation('com.crashlytics.sdk.android:answers:1.4.6@aar') { transitive = true }
    testImplementation libraries.junit
    testImplementation libraries.truth
    androidTestImplementation libraries.espressoCore
    androidTestImplementation libraries.espressoIntents

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.pixplicity.sharp:library:1.1.0'
}

androidExtensions {
    experimental = true
}

// FIXME - build and install the sdk into the app/libs directory
// We were having some issues with the kapt generated files from the sdk when importing as a module

def sdk_location = project.properties['sdk_location'] ?: ""
task compileSdk(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'build-sdk.sh', sdk_location
    } else {
        commandLine './build-sdk.sh', sdk_location
    }
}
preBuild.dependsOn compileSdk
if (isPlay) {
    apply plugin: 'com.google.gms.google-services'
}
>>>>>>> develop
